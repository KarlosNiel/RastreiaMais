# Generated by Django 5.2.6 on 2025-10-30 13:58

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("accounts", "0004_alter_patientuser_alcohol_consumption_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="DCNT",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "is_diagnosed",
                    models.BooleanField(
                        blank=True, null=True, verbose_name="Diagnóstico confirmado"
                    ),
                ),
                (
                    "uses_medication",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("SIM", "Sim"),
                            ("NAO", "Não"),
                            ("IRREGULAR", "Irregular"),
                            ("NAO_SE_APLICA", "Não se aplica"),
                        ],
                        max_length=25,
                        null=True,
                        verbose_name="Uso de medicação",
                    ),
                ),
                (
                    "medications_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="Nome dos medicamentos"
                    ),
                ),
                (
                    "family_history",
                    models.BooleanField(
                        blank=True, null=True, verbose_name="Histórico familiar"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "get_latest_by": "created_at",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DM",
            fields=[
                (
                    "dcnt_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="conditions.dcnt",
                    ),
                ),
                (
                    "capillary_blood_glucose_random",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="Glicemia Capilar Aleatória (mg/dL)",
                    ),
                ),
                (
                    "fasting_capillary_blood_glucose",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="Glicemia Capilar em Jejum (mg/dL)",
                    ),
                ),
                (
                    "glycated_hemoglobin",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="Hemoglobina Glicada (%)",
                    ),
                ),
                (
                    "weight",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="Peso (kg)",
                    ),
                ),
                (
                    "height",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=4,
                        null=True,
                        verbose_name="Altura (m)",
                    ),
                ),
                (
                    "IMC",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="IMC",
                    ),
                ),
                (
                    "abdominal_circumference",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="Circunferência Abdominal (cm)",
                    ),
                ),
                (
                    "age_over_45",
                    models.BooleanField(default=False, verbose_name="Idade ≥ 45 anos"),
                ),
                (
                    "overweight_or_obesity_imc_25",
                    models.BooleanField(
                        default=False, verbose_name="Sobrepeso ou Obesidade (IMC ≥ 25)"
                    ),
                ),
                (
                    "physical_inactivity",
                    models.BooleanField(
                        default=False, verbose_name="Inatividade Física"
                    ),
                ),
                (
                    "high_blood_pressure",
                    models.BooleanField(
                        default=False, verbose_name="Hipertensão Arterial"
                    ),
                ),
                (
                    "high_cholesterol_or_triglycerides",
                    models.BooleanField(
                        default=False,
                        verbose_name="Colesterol ou Triglicerídeos Elevados",
                    ),
                ),
                (
                    "history_of_gestational_diabetes",
                    models.BooleanField(
                        default=False, verbose_name="Histórico de Diabetes Gestacional"
                    ),
                ),
                (
                    "polycystic_ovary_syndrome",
                    models.BooleanField(
                        default=False, verbose_name="Síndrome do Ovário Policístico"
                    ),
                ),
                (
                    "screening_result",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("NORMAL", "Normal"),
                            ("GLICEMIA_ALTERADA", "Glicemia alterada"),
                            ("SUSPEITA_DIABETES", "Suspeita de diabetes"),
                            ("DIAGNOSTICO_CONFIRMADO", "Diagnóstico confirmado"),
                        ],
                        max_length=255,
                        null=True,
                        verbose_name="Resultado do Rastreamento",
                    ),
                ),
                (
                    "adopted_conduct",
                    models.CharField(
                        blank=True,
                        choices=[
                            (
                                "CONFIRMACAO_LABORATORIAL",
                                "Encaminhado para confirmação laboratorial",
                            ),
                            ("INICIO_TRATAMENTO", "Início de tratamento"),
                            (
                                "ORIENTACAO_NUTRICIONAL",
                                "Orientação nutricional/educação em saúde",
                            ),
                            ("ENCAMINHAMENTO_MEDICO", "Encaminhamento médico"),
                        ],
                        max_length=255,
                        null=True,
                        verbose_name="Conduta Adotada",
                    ),
                ),
                (
                    "adopted_conduct_other",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Outra Conduta (Especificar)",
                    ),
                ),
                (
                    "treatment_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("MEDICAMENTOSO", "Medicamentoso (oral)"),
                            ("INSULINA", "Insulina"),
                            ("ALIMENTAR_ESTILO_VIDA", "Alimentar/estilo de vida"),
                        ],
                        max_length=30,
                        null=True,
                        verbose_name="Tipo de tratamento",
                    ),
                ),
                (
                    "treatment_type_other",
                    models.TextField(
                        blank=True, null=True, verbose_name="Outro tipo de tratamento"
                    ),
                ),
                (
                    "diabetes_comorbidities",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("CARDIACA", "Cardíaca"),
                            ("RENAL", "Renal"),
                            ("VISUAL", "Visual"),
                            ("VASCULAR", "Vascular"),
                        ],
                        max_length=30,
                        null=True,
                        verbose_name="Comorbidades em decorrência da diabetes",
                    ),
                ),
                (
                    "diabetes_comorbidities_others",
                    models.TextField(
                        blank=True, null=True, verbose_name="Outras comorbidades"
                    ),
                ),
                (
                    "diabetic_foot",
                    models.BooleanField(
                        blank=True, null=True, verbose_name="Presença de pé diabético"
                    ),
                ),
                (
                    "diabetic_foot_member",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Membro afetado pelo pé diabético",
                    ),
                ),
                (
                    "patient",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="accounts.patientuser",
                        verbose_name="Paciente",
                    ),
                ),
            ],
            options={
                "verbose_name": "DM",
                "verbose_name_plural": "DMs",
            },
            bases=("conditions.dcnt", models.Model),
        ),
        migrations.CreateModel(
            name="HAS",
            fields=[
                (
                    "dcnt_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="conditions.dcnt",
                    ),
                ),
                (
                    "BP_assessment1_1",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Pressão Arterial 1ª Avaliação (Sistólica)",
                    ),
                ),
                (
                    "BP_assessment1_2",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Pressão Arterial 1ª Avaliação (Diastólica)",
                    ),
                ),
                (
                    "BP_assessment2_1",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Pressão Arterial 2ª Avaliação (Sistólica)",
                    ),
                ),
                (
                    "BP_assessment2_2",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Pressão Arterial 2ª Avaliação (Diastólica)",
                    ),
                ),
                (
                    "weight",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="Peso (kg)",
                    ),
                ),
                (
                    "IMC",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="IMC",
                    ),
                ),
                (
                    "abdominal_circumference",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="Circunferência Abdominal (cm)",
                    ),
                ),
                (
                    "total_cholesterol",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Colesterol Total (mg/dL)"
                    ),
                ),
                (
                    "cholesterol_data",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Data da Coleta do Colesterol",
                    ),
                ),
                (
                    "HDL_cholesterol",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Colesterol HDL (mg/dL)"
                    ),
                ),
                (
                    "HDL_data",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Data da Coleta do HDL"
                    ),
                ),
                (
                    "BP_classifications",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("NORMAL", "Normal"),
                            ("PRE_HIPERTENSO", "Pré-hipertenso"),
                            ("HIPERTENSO_E1", "Hipertenso Estágio 1"),
                            ("HIPERTENSO_E2", "Hipertenso Estágio 2"),
                            ("HIPERTENSO_E3", "Hipertenso Estágio 3"),
                        ],
                        max_length=100,
                        null=True,
                        verbose_name="Classificação da PA",
                    ),
                ),
                (
                    "framingham_score",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("BAIXO", "<10% Baixo"),
                            ("MODERADO", "10–20% Moderado"),
                            ("ALTO", ">20% Alto"),
                        ],
                        max_length=100,
                        null=True,
                        verbose_name="Escore de Framingham",
                    ),
                ),
                (
                    "conduct_adopted",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ACOMPANHAMENTO_APS", "Acompanhamento na APS"),
                            ("ENCAMINHAMENTO_MEDICO", "Encaminhamento médico"),
                            ("ACONSELHAMENTO_GRUPO", "Aconselhamento em grupo"),
                        ],
                        max_length=255,
                        null=True,
                        verbose_name="Conduta Adotada",
                    ),
                ),
                (
                    "any_complications_HBP",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("AVC", "AVC"),
                            ("INFARTO", "Infarto"),
                            ("DOENCA_RENAL", "Doença renal"),
                        ],
                        max_length=30,
                        null=True,
                        verbose_name="Complicações relacionadas à pressão alta",
                    ),
                ),
                (
                    "patient",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="accounts.patientuser",
                        verbose_name="Paciente",
                    ),
                ),
            ],
            options={
                "verbose_name": "HAS",
                "verbose_name_plural": "HASs",
            },
            bases=("conditions.dcnt", models.Model),
        ),
        migrations.CreateModel(
            name="OtherDCNT",
            fields=[
                (
                    "dcnt_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="conditions.dcnt",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Nome da DCNT",
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="accounts.patientuser",
                        verbose_name="Paciente",
                    ),
                ),
            ],
            options={
                "verbose_name": "Outra DCNT",
                "verbose_name_plural": "Outras DCNT",
                "constraints": [
                    models.UniqueConstraint(
                        fields=("patient", "name"), name="unique_patient_other_dcnt"
                    )
                ],
            },
            bases=("conditions.dcnt",),
        ),
    ]
